version: 2.1

orbs:
  python: circleci/python@0.3.2
  k3d:
    commands:
      k3d_up:
        parameters:
          cluster_name:
            description: Name for the k3d cluster
            type: string
            default: myk3d
        steps:
          - run:
              command: |
                wget -q -O - https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
                k3d cluster create <<parameters.cluster_name>>
            

jobs:
  build-and-test:
    executor: python/default
    environment:
      PYTHONPATH=./src
    steps:
      - checkout
      - python/load-cache
      - python/install-deps
      - python/save-cache
      - python/test
  test-on-k8s:
    executor: python/default
    environment:
      PYTHONPATH=./src
    steps:
      - setup_remote_docker
      - checkout
      - python/load-cache
      - python/install-deps
      - python/install-deps:
          dependency-file: testcases/requirements.txt
      - python/save-cache
      - k3d/k3d_up:
          cluster_name: circleci-k8s
      # - run:
      #     name: Setup k8s
      #     command: |
      #       wget -q -O - https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
      #       k3d cluster create circleci-k8s
      - 
      - run:
          name: Run kubectl
          command: |
            export KUBECONFIG=$(k3d kubeconfig write circleci-k8s)
            chmod a+r $KUBECONFIG
            docker create -v /.kube --name kubeconfig alpine:3.4 /bin/true
            docker create -v /data --name data alpine:3.4 /bin/true
            docker volume create  helm_cache
            docker volume create  helm_config
            docker volume create  helm_data
            sed -i "s/0.0.0.0.*/0.0.0.0:6443/g" $KUBECONFIG
            docker cp $KUBECONFIG kubeconfig:/.kube/config
            shopt -s expand_aliases
            alias helm="docker run --rm --name helm -e KUBECONFIG=/.kube/config --network container:k3d-circleci-k8s-serverlb --volumes-from kubeconfig --volumes-from data -v helm_cache:/root/.cache/helm -v helm_config:/root/.config/helm -v helm_data:/root/.local/share/helm alpine/helm:latest"
            alias kubectl="docker run --rm --name kubectl --network container:k3d-circleci-k8s-serverlb --volumes-from kubeconfig bitnami/kubectl:latest"
            alias proxy="docker run -d --rm --name proxy --network container:k3d-circleci-k8s-serverlb --volumes-from kubeconfig bitnami/kubectl:latest"
            
            
            
            helm repo add stable https://kubernetes-charts.storage.googleapis.com
            # git clone https://github.com/kyma-incubator/octopus
            # docker cp octopus data:/data/
            # helm install octopus /data/octopus/chart/octopus/
            
            #via kubeproxy
            
            #helm install grafana stable/grafana
            #export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafana" -o jsonpath="{.items[0].metadata.name}")
            #proxy --namespace default port-forward $POD_NAME 3000
            #docker run --rm -it --network container:proxy busybox /bin/sh -c "wget ${SERVICE_IP}:3000; grep Grafana index.html"
            
            #via Service type LoadBalancer, similar should be possible with NodePort

            #docker cp testcases/grafana/values.yaml data:/data/
            #helm install grafana stable/grafana -f /data/values.yaml
            #sleep 30
            #export SERVICE_IP=$(kubectl get svc --namespace default grafana -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            #docker run --rm -it --network k3d-circleci-k8s busybox /bin/sh -c "wget ${SERVICE_IP}:3000; grep Grafana index.html"
            
            #via ingress - chart-example.local - is deafult host for ingress in used grafana chart

            docker cp testcases/grafana/with_ingress.yaml data:/data/
            helm install grafana stable/grafana -f /data/with_ingress.yaml
            sleep 30
            export INGRESS_IP=$(kubectl get ing --namespace default grafana -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            docker run --rm -it --network k3d-circleci-k8s busybox /bin/sh -c "echo '${INGRESS_IP}  chart-example.local' >> /etc/hosts; wget http://chart-example.local/; grep Grafana index.html"
            
            #kubectl get pods
workflows:
  main:
    jobs:
      - build-and-test
      - test-on-k8s
  #     - test-coverage
  #     - code-quality
  # publish:
  #   jobs:
  #     - publish-to-pypi